{"version":3,"sources":["../../../projects/angular2-query-builder/src/lib/query-builder/query-operator.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-field.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-entity.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-switch-group.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-button-group.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-input.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-remove-button.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-empty-warning.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-arrow-icon.directive.ts","../../../projects/angular2-query-builder/src/lib/query-builder/query-builder.component.ts","../../../projects/angular2-query-builder/src/lib/angular2-query-builder.module.ts"],"names":["template","this","Directive","args","selector","TemplateRef","QueryInputDirective","Object","defineProperty","prototype","_type","value","Input","CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","QueryBuilderComponent","multi","VALIDATOR","NG_VALIDATORS","changeDetectorRef","_this","defaultClassNames","arrowIconButton","arrowIcon","removeIcon","addIcon","button","buttonGroup","removeButton","switchGroup","switchLabel","switchRadio","rightAlign","transition","collapsed","treeContainer","tree","row","connector","rule","ruleSet","invalidRuleSet","emptyWarning","fieldControl","fieldControlSize","entityControl","entityControlSize","operatorControl","operatorControlSize","inputControl","inputControlSize","defaultOperatorMap","string","number","time","date","category","boolean","data","condition","rules","allowRuleset","allowCollapse","emptyMessage","config","fields","persistValueOnFieldChange","defaultTemplateTypes","defaultPersistValueTypes","defaultEmptyList","inputContextCache","Map","operatorContextCache","fieldContextCache","entityContextCache","removeButtonContextCache","getDisabledState","disabled","ngOnInit","ngOnChanges","changes","type","Error","keys","map","field","entities","entity","operatorsCache","validate","control","errors","ruleErrorStore","hasErrors","allowEmptyRulesets","checkEmptyRuleInRuleset","empty","validateRulesInRuleset","length","handleDataChange","writeValue","obj","registerOnChange","fn","onChangeCallback","registerOnTouched","onTouchedCallback","setDisabledState","isDisabled","detectChanges","findTemplateForRule","getInputType","operator","queryInput","findQueryInput","indexOf","console","warn","parentInputTemplates","inputTemplates","find","item","queryInputType","getOperators","operators","fieldObject","operatorMap","nullable","concat","getFields","filter","getOptions","options","getClassNames","_i","arguments","clsLookup","classNames","id","c","join","getDefaultField","undefined","defaultField","getDefaultValue","entityFields","name","getDefaultOperator","defaultOperator","addRule","parent","defaultValue","handleTouched","removeRule","r","delete","addRuleSet","removeRuleSet","ruleset","parentValue","transitionEnd","e","nativeElement","style","maxHeight","toggleCollapse","computedTreeContainerHeight","setTimeout","firstElementChild","clientHeight","changeCondition","changeOperator","coerceValueForOperator","Array","isArray","changeInput","changeField","fieldValue","inputContext","get","currentField","nextField","nextValue","calculateFieldChangeValue","getInputContext","getFieldContext","getOperatorContext","getEntityContext","changeEntity","entityValue","index","i","rs","findIndex","x","getOperatorTemplate","t","parentOperatorTemplate","operatorTemplate","getFieldTemplate","parentFieldTemplate","fieldTemplate","getEntityTemplate","parentEntityTemplate","entityTemplate","getArrowIconTemplate","parentArrowIconTemplate","arrowIconTemplate","getButtonGroupTemplate","parentButtonGroupTemplate","buttonGroupTemplate","getSwitchGroupTemplate","parentSwitchGroupTemplate","switchGroupTemplate","getRemoveButtonTemplate","parentRemoveButtonTemplate","removeButtonTemplate","getEmptyWarningTemplate","parentEmptyWarningTemplate","emptyWarningTemplate","getQueryItemClassName","local","cls","invalid","getButtonGroupContext","buttonGroupContext","bind","$implicit","getRemoveButtonContext","has","set","onChange","getSwitchGroupContext","getArrowIconContext","getEmptyWarningContext","message","currentValue","some","errorStore","forEach","validator","apply","error","push","markForCheck","parentChangeCallback","parentTouchedCallback","Component","providers","ChangeDetectorRef","ViewChild","static","ContentChild","QueryButtonGroupDirective","QuerySwitchGroupDirective","QueryFieldDirective","QueryEntityDirective","QueryOperatorDirective","QueryRemoveButtonDirective","QueryEmptyWarningDirective","ContentChildren","QueryArrowIconDirective","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryOperator]'})\nexport class QueryOperatorDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryField]'})\nexport class QueryFieldDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryEntity]'})\nexport class QueryEntityDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[querySwitchGroup]'})\nexport class QuerySwitchGroupDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryButtonGroup]'})\nexport class QueryButtonGroupDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, Input, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryInput]'})\nexport class QueryInputDirective {\n  /** Unique name for query input type. */\n  @Input()\n  get queryInputType(): string { return this._type; }\n  set queryInputType(value: string) {\n    // If the directive is set without a type (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (!value) { return; }\n    this._type = value;\n  }\n  private _type: string;\n\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryRemoveButton]'})\nexport class QueryRemoveButtonDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryEmptyWarning]'})\nexport class QueryEmptyWarningDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({selector: '[queryArrowIcon]'})\nexport class QueryArrowIconDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport { QueryOperatorDirective } from './query-operator.directive';\nimport { QueryFieldDirective } from './query-field.directive';\nimport { QueryEntityDirective } from './query-entity.directive';\nimport { QuerySwitchGroupDirective } from './query-switch-group.directive';\nimport { QueryButtonGroupDirective } from './query-button-group.directive';\nimport { QueryInputDirective } from './query-input.directive';\nimport { QueryRemoveButtonDirective } from './query-remove-button.directive';\nimport { QueryEmptyWarningDirective } from './query-empty-warning.directive';\nimport { QueryArrowIconDirective } from './query-arrow-icon.directive';\nimport {\n  ButtonGroupContext,\n  Entity,\n  Field,\n  SwitchGroupContext,\n  EntityContext,\n  FieldContext,\n  InputContext,\n  LocalRuleMeta,\n  OperatorContext,\n  Option,\n  QueryBuilderClassNames,\n  QueryBuilderConfig,\n  RemoveButtonContext,\n  ArrowIconContext,\n  Rule,\n  RuleSet,\n  EmptyWarningContext,\n} from './query-builder.interfaces';\nimport {\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n\nexport const CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => QueryBuilderComponent),\n  multi: true\n};\n\nexport const VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => QueryBuilderComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'query-builder',\n  templateUrl: './query-builder.component.html',\n  styleUrls: ['./query-builder.component.scss'],\n  providers: [CONTROL_VALUE_ACCESSOR, VALIDATOR]\n})\nexport class QueryBuilderComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n  public fields: Field[];\n  public filterFields: Field[];\n  public entities: Entity[];\n  public defaultClassNames: QueryBuilderClassNames = {\n    arrowIconButton: 'q-arrow-icon-button',\n    arrowIcon: 'q-icon q-arrow-icon',\n    removeIcon: 'q-icon q-remove-icon',\n    addIcon: 'q-icon q-add-icon',\n    button: 'q-button',\n    buttonGroup: 'q-button-group',\n    removeButton: 'q-remove-button',\n    switchGroup: 'q-switch-group',\n    switchLabel: 'q-switch-label',\n    switchRadio: 'q-switch-radio',\n    rightAlign: 'q-right-align',\n    transition: 'q-transition',\n    collapsed: 'q-collapsed',\n    treeContainer: 'q-tree-container',\n    tree: 'q-tree',\n    row: 'q-row',\n    connector: 'q-connector',\n    rule: 'q-rule',\n    ruleSet: 'q-ruleset',\n    invalidRuleSet: 'q-invalid-ruleset',\n    emptyWarning: 'q-empty-warning',\n    fieldControl: 'q-field-control',\n    fieldControlSize: 'q-control-size',\n    entityControl: 'q-entity-control',\n    entityControlSize: 'q-control-size',\n    operatorControl: 'q-operator-control',\n    operatorControlSize: 'q-control-size',\n    inputControl: 'q-input-control',\n    inputControlSize: 'q-control-size'\n  };\n  public defaultOperatorMap: { [key: string]: string[] } = {\n    string: ['=', '!=', 'contains', 'like'],\n    number: ['=', '!=', '>', '>=', '<', '<='],\n    time: ['=', '!=', '>', '>=', '<', '<='],\n    date: ['=', '!=', '>', '>=', '<', '<='],\n    category: ['=', '!=', 'in', 'not in'],\n    boolean: ['=']\n  };\n  @Input() disabled: boolean;\n  @Input() data: RuleSet = { condition: 'and', rules: [] };\n\n  // For ControlValueAccessor interface\n  public onChangeCallback: () => void;\n  public onTouchedCallback: () => any;\n\n  @Input() allowRuleset: boolean = true;\n  @Input() allowCollapse: boolean = false;\n  @Input() emptyMessage: string = 'A ruleset cannot be empty. Please add a rule or remove it all together.';\n  @Input() classNames: QueryBuilderClassNames;\n  @Input() operatorMap: { [key: string]: string[] };\n  @Input() parentValue: RuleSet;\n  @Input() config: QueryBuilderConfig = { fields: {} };\n  @Input() parentArrowIconTemplate: QueryArrowIconDirective;\n  @Input() parentInputTemplates: QueryList<QueryInputDirective>;\n  @Input() parentOperatorTemplate: QueryOperatorDirective;\n  @Input() parentFieldTemplate: QueryFieldDirective;\n  @Input() parentEntityTemplate: QueryEntityDirective;\n  @Input() parentSwitchGroupTemplate: QuerySwitchGroupDirective;\n  @Input() parentButtonGroupTemplate: QueryButtonGroupDirective;\n  @Input() parentRemoveButtonTemplate: QueryRemoveButtonDirective;\n  @Input() parentEmptyWarningTemplate: QueryEmptyWarningDirective;\n  @Input() parentChangeCallback: () => void;\n  @Input() parentTouchedCallback: () => void;\n  @Input() persistValueOnFieldChange: boolean = false;\n\n  @ViewChild('treeContainer', {static: true}) treeContainer: ElementRef;\n\n  @ContentChild(QueryButtonGroupDirective) buttonGroupTemplate: QueryButtonGroupDirective;\n  @ContentChild(QuerySwitchGroupDirective) switchGroupTemplate: QuerySwitchGroupDirective;\n  @ContentChild(QueryFieldDirective) fieldTemplate: QueryFieldDirective;\n  @ContentChild(QueryEntityDirective) entityTemplate: QueryEntityDirective;\n  @ContentChild(QueryOperatorDirective) operatorTemplate: QueryOperatorDirective;\n  @ContentChild(QueryRemoveButtonDirective) removeButtonTemplate: QueryRemoveButtonDirective;\n  @ContentChild(QueryEmptyWarningDirective) emptyWarningTemplate: QueryEmptyWarningDirective;\n  @ContentChildren(QueryInputDirective) inputTemplates: QueryList<QueryInputDirective>;\n  @ContentChild(QueryArrowIconDirective) arrowIconTemplate: QueryArrowIconDirective;\n\n  private defaultTemplateTypes: string[] = [\n    'string', 'number', 'time', 'date', 'category', 'boolean', 'multiselect'];\n  private defaultPersistValueTypes: string[] = [\n    'string', 'number', 'time', 'date', 'boolean'];\n  private defaultEmptyList: any[] = [];\n  private operatorsCache: { [key: string]: string[] };\n  private inputContextCache = new Map<Rule, InputContext>();\n  private operatorContextCache = new Map<Rule, OperatorContext>();\n  private fieldContextCache = new Map<Rule, FieldContext>();\n  private entityContextCache = new Map<Rule, EntityContext>();\n  private removeButtonContextCache = new Map<Rule, RemoveButtonContext>();\n  private buttonGroupContext: ButtonGroupContext;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) { }\n\n  // ----------OnInit Implementation----------\n\n  ngOnInit() { }\n\n  // ----------OnChanges Implementation----------\n\n  ngOnChanges(changes: SimpleChanges) {\n    const config = this.config;\n    const type = typeof config;\n    if (type === 'object') {\n      this.fields = Object.keys(config.fields).map((value) => {\n        const field = config.fields[value];\n        field.value = field.value || value;\n        return field;\n      });\n      if (config.entities) {\n        this.entities = Object.keys(config.entities).map((value) => {\n          const entity = config.entities[value];\n          entity.value = entity.value || value;\n          return entity;\n        });\n      } else {\n        this.entities = null;\n      }\n      this.operatorsCache = {};\n    } else {\n      throw new Error(`Expected 'config' must be a valid object, got ${type} instead.`);\n    }\n  }\n\n  // ----------Validator Implementation----------\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    const errors: { [key: string]: any } = {};\n    const ruleErrorStore = [];\n    let hasErrors = false;\n\n    if (!this.config.allowEmptyRulesets && this.checkEmptyRuleInRuleset(this.data)) {\n      errors.empty = 'Empty rulesets are not allowed.';\n      hasErrors = true;\n    }\n\n    this.validateRulesInRuleset(this.data, ruleErrorStore);\n\n    if (ruleErrorStore.length) {\n      errors.rules = ruleErrorStore;\n      hasErrors = true;\n    }\n    return hasErrors ? errors : null;\n  }\n\n  // ----------ControlValueAccessor Implementation----------\n\n  @Input()\n  get value(): RuleSet {\n    return this.data;\n  }\n  set value(value: RuleSet) {\n    // When component is initialized without a formControl, null is passed to value\n    this.data = value || { condition: 'and', rules: [] };\n    this.handleDataChange();\n  }\n\n  writeValue(obj: any): void {\n    this.value = obj;\n  }\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = () => fn(this.data);\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = () => fn(this.data);\n  }\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.detectChanges();\n  }\n\n  // ----------END----------\n\n  getDisabledState = (): boolean => {\n    return this.disabled;\n  }\n\n  findTemplateForRule(rule: Rule): TemplateRef<any> {\n    const type = this.getInputType(rule.field, rule.operator);\n    if (type) {\n      const queryInput = this.findQueryInput(type);\n      if (queryInput) {\n        return queryInput.template;\n      } else {\n        if (this.defaultTemplateTypes.indexOf(type) === -1) {\n          console.warn(`Could not find template for field with type: ${type}`);\n        }\n        return null;\n      }\n    }\n  }\n\n  findQueryInput(type: string): QueryInputDirective {\n    const templates = this.parentInputTemplates || this.inputTemplates;\n    return templates.find((item) => item.queryInputType === type);\n  }\n\n  getOperators(field: string): string[] {\n    if (this.operatorsCache[field]) {\n      return this.operatorsCache[field];\n    }\n    let operators = this.defaultEmptyList;\n    const fieldObject = this.config.fields[field];\n\n    if (this.config.getOperators) {\n      return this.config.getOperators(field, fieldObject);\n    }\n\n    const type = fieldObject.type;\n\n    if (fieldObject && fieldObject.operators) {\n      operators = fieldObject.operators;\n    } else if (type) {\n      operators = (this.operatorMap && this.operatorMap[type]) || this.defaultOperatorMap[type] || this.defaultEmptyList;\n      if (operators.length === 0) {\n        console.warn(\n          `No operators found for field '${field}' with type ${fieldObject.type}. ` +\n          `Please define an 'operators' property on the field or use the 'operatorMap' binding to fix this.`);\n      }\n      if (fieldObject.nullable) {\n        operators = operators.concat(['is null', 'is not null']);\n      }\n    } else {\n      console.warn(`No 'type' property found on field: '${field}'`);\n    }\n\n    // Cache reference to array object, so it won't be computed next time and trigger a rerender.\n    this.operatorsCache[field] = operators;\n    return operators;\n  }\n\n  getFields(entity: string): Field[] {\n    if (this.entities && entity) {\n      return this.fields.filter((field) => {\n        return field && field.entity === entity;\n      });\n    } else {\n      return this.fields;\n    }\n  }\n\n  getInputType(field: string, operator: string): string {\n    if (this.config.getInputType) {\n      return this.config.getInputType(field, operator);\n    }\n\n    if (!this.config.fields[field]) {\n      throw new Error(`No configuration for field '${field}' could be found! Please add it to config.fields.`);\n    }\n\n    const type = this.config.fields[field].type;\n    switch (operator) {\n      case 'is null':\n      case 'is not null':\n        return null;  // No displayed component\n      case 'in':\n      case 'not in':\n        return type === 'category' || type === 'boolean' ? 'multiselect' : type;\n      default:\n        return type;\n    }\n  }\n\n  getOptions(field: string): Option[] {\n    if (this.config.getOptions) {\n      return this.config.getOptions(field);\n    }\n    return this.config.fields[field].options || this.defaultEmptyList;\n  }\n\n  getClassNames(...args): string {\n    const clsLookup = this.classNames ? this.classNames : this.defaultClassNames;\n    const classNames = args.map((id) => clsLookup[id] || this.defaultClassNames[id]).filter((c) => !!c);\n    return classNames.length ? classNames.join(' ') : null;\n  }\n\n  getDefaultField(entity: Entity): Field {\n    if (!entity) {\n      return null;\n    } else if (entity.defaultField !== undefined) {\n      return this.getDefaultValue(entity.defaultField);\n    } else {\n      const entityFields = this.fields.filter((field) => {\n        return field && field.entity === entity.value;\n      });\n      if (entityFields && entityFields.length) {\n        return entityFields[0];\n      } else {\n        console.warn(`No fields found for entity '${entity.name}'. ` +\n          `A 'defaultOperator' is also not specified on the field config. Operator value will default to null.`);\n        return null;\n      }\n    }\n  }\n\n  getDefaultOperator(field: Field): string {\n    if (field && field.defaultOperator !== undefined) {\n      return this.getDefaultValue(field.defaultOperator);\n    } else {\n      const operators = this.getOperators(field.value);\n      if (operators && operators.length) {\n        return operators[0];\n      } else {\n        console.warn(`No operators found for field '${field.value}'. ` +\n          `A 'defaultOperator' is also not specified on the field config. Operator value will default to null.`);\n        return null;\n      }\n    }\n  }\n\n  addRule(parent?: RuleSet): void {\n    if (this.disabled) {\n      return;\n    }\n\n    parent = parent || this.data;\n    if (this.config.addRule) {\n      this.config.addRule(parent);\n    } else {\n      const field = this.fields[0];\n      parent.rules = parent.rules.concat([{\n        field: field.value,\n        operator: this.getDefaultOperator(field),\n        value: this.getDefaultValue(field.defaultValue),\n        entity: field.entity\n      }]);\n    }\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  removeRule(rule: Rule, parent?: RuleSet): void {\n    if (this.disabled) {\n      return;\n    }\n\n    parent = parent || this.data;\n    if (this.config.removeRule) {\n      this.config.removeRule(rule, parent);\n    } else {\n      parent.rules = parent.rules.filter((r) => r !== rule);\n    }\n    this.inputContextCache.delete(rule);\n    this.operatorContextCache.delete(rule);\n    this.fieldContextCache.delete(rule);\n    this.entityContextCache.delete(rule);\n    this.removeButtonContextCache.delete(rule);\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  addRuleSet(parent?: RuleSet): void {\n    if (this.disabled) {\n      return;\n    }\n\n    parent = parent || this.data;\n    if (this.config.addRuleSet) {\n      this.config.addRuleSet(parent);\n    } else {\n      parent.rules = parent.rules.concat([{ condition: 'and', rules: [] }]);\n    }\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  removeRuleSet(ruleset?: RuleSet, parent?: RuleSet): void {\n    if (this.disabled) {\n      return;\n    }\n\n    ruleset = ruleset || this.data;\n    parent = parent || this.parentValue;\n    if (this.config.removeRuleSet) {\n      this.config.removeRuleSet(ruleset, parent);\n    } else {\n      parent.rules = parent.rules.filter((r) => r !== ruleset);\n    }\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  transitionEnd(e: Event): void {\n    this.treeContainer.nativeElement.style.maxHeight = null;\n  }\n\n  toggleCollapse(): void {\n    this.computedTreeContainerHeight();\n    setTimeout(() => {\n      this.data.collapsed = !this.data.collapsed;\n    }, 100);\n  }\n\n  computedTreeContainerHeight(): void {\n    const nativeElement: HTMLElement = this.treeContainer.nativeElement;\n    if (nativeElement && nativeElement.firstElementChild) {\n      nativeElement.style.maxHeight = (nativeElement.firstElementChild.clientHeight + 8) + 'px';\n    }\n  }\n\n  changeCondition(value: string): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.data.condition = value;\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  changeOperator(rule: Rule): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.config.coerceValueForOperator) {\n      rule.value = this.config.coerceValueForOperator(rule.operator, rule.value, rule);\n    } else {\n      rule.value = this.coerceValueForOperator(rule.operator, rule.value, rule);\n    }\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  coerceValueForOperator(operator: string, value: any, rule: Rule): any {\n    const inputType: string = this.getInputType(rule.field, operator);\n    if (inputType === 'multiselect' && !Array.isArray(value)) {\n      return [value];\n    }\n    return value;\n  }\n\n  changeInput(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  changeField(fieldValue: string, rule: Rule): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const inputContext = this.inputContextCache.get(rule);\n    const currentField = inputContext && inputContext.field;\n\n    const nextField: Field = this.config.fields[fieldValue];\n\n    const nextValue = this.calculateFieldChangeValue(\n      currentField, nextField, rule.value);\n\n    if (nextValue !== undefined) {\n      rule.value = nextValue;\n    } else {\n      delete rule.value;\n    }\n\n    rule.operator = this.getDefaultOperator(nextField);\n\n    // Create new context objects so templates will automatically update\n    this.inputContextCache.delete(rule);\n    this.operatorContextCache.delete(rule);\n    this.fieldContextCache.delete(rule);\n    this.entityContextCache.delete(rule);\n    this.getInputContext(rule);\n    this.getFieldContext(rule);\n    this.getOperatorContext(rule);\n    this.getEntityContext(rule);\n\n    this.handleTouched();\n    this.handleDataChange();\n  }\n\n  changeEntity(entityValue: string, rule: Rule, index: number, data: RuleSet): void {\n    if (this.disabled) {\n      return;\n    }\n    let i = index;\n    let rs = data;\n    const entity: Entity = this.entities.find((e) => e.value === entityValue);\n    const defaultField: Field = this.getDefaultField(entity);\n    if (!rs) {\n      rs = this.data;\n      i = rs.rules.findIndex((x) => x === rule);\n    }\n    rule.field = defaultField.value;\n    rs.rules[i] = rule;\n    if (defaultField) {\n      this.changeField(defaultField.value, rule);\n    } else {\n      this.handleTouched();\n      this.handleDataChange();\n    }\n  }\n\n  getDefaultValue(defaultValue: any): any {\n    switch (typeof defaultValue) {\n      case 'function':\n        return defaultValue();\n      default:\n        return defaultValue;\n    }\n  }\n\n  getOperatorTemplate(): TemplateRef<any> {\n    const t = this.parentOperatorTemplate || this.operatorTemplate;\n    return t ? t.template : null;\n  }\n\n  getFieldTemplate(): TemplateRef<any> {\n    const t = this.parentFieldTemplate || this.fieldTemplate;\n    return t ? t.template : null;\n  }\n\n  getEntityTemplate(): TemplateRef<any> {\n    const t = this.parentEntityTemplate || this.entityTemplate;\n    return t ? t.template : null;\n  }\n\n  getArrowIconTemplate(): TemplateRef<any> {\n    const t = this.parentArrowIconTemplate || this.arrowIconTemplate;\n    return t ? t.template : null;\n  }\n\n  getButtonGroupTemplate(): TemplateRef<any> {\n    const t = this.parentButtonGroupTemplate || this.buttonGroupTemplate;\n    return t ? t.template : null;\n  }\n\n  getSwitchGroupTemplate(): TemplateRef<any> {\n    const t = this.parentSwitchGroupTemplate || this.switchGroupTemplate;\n    return t ? t.template : null;\n  }\n\n  getRemoveButtonTemplate(): TemplateRef<any> {\n    const t = this.parentRemoveButtonTemplate || this.removeButtonTemplate;\n    return t ? t.template : null;\n  }\n\n  getEmptyWarningTemplate(): TemplateRef<any> {\n    const t = this.parentEmptyWarningTemplate || this.emptyWarningTemplate;\n    return t ? t.template : null;\n  }\n\n  getQueryItemClassName(local: LocalRuleMeta): string {\n    let cls = this.getClassNames('row', 'connector', 'transition');\n    cls += ' ' + this.getClassNames(local.ruleset ? 'ruleSet' : 'rule');\n    if (local.invalid) {\n      cls += ' ' + this.getClassNames('invalidRuleSet');\n    }\n    return cls;\n  }\n\n  getButtonGroupContext(): ButtonGroupContext {\n    if (!this.buttonGroupContext) {\n      this.buttonGroupContext = {\n        addRule: this.addRule.bind(this),\n        addRuleSet: this.allowRuleset && this.addRuleSet.bind(this),\n        removeRuleSet: this.allowRuleset && this.parentValue && this.removeRuleSet.bind(this),\n        getDisabledState: this.getDisabledState,\n        $implicit: this.data\n      };\n    }\n    return this.buttonGroupContext;\n  }\n\n  getRemoveButtonContext(rule: Rule): RemoveButtonContext {\n    if (!this.removeButtonContextCache.has(rule)) {\n      this.removeButtonContextCache.set(rule, {\n        removeRule: this.removeRule.bind(this),\n        getDisabledState: this.getDisabledState,\n        $implicit: rule\n      });\n    }\n    return this.removeButtonContextCache.get(rule);\n  }\n\n  getFieldContext(rule: Rule): FieldContext {\n    if (!this.fieldContextCache.has(rule)) {\n      this.fieldContextCache.set(rule, {\n        onChange: this.changeField.bind(this),\n        getFields: this.getFields.bind(this),\n        getDisabledState: this.getDisabledState,\n        fields: this.fields,\n        $implicit: rule\n      });\n    }\n    return this.fieldContextCache.get(rule);\n  }\n\n  getEntityContext(rule: Rule): EntityContext {\n    if (!this.entityContextCache.has(rule)) {\n      this.entityContextCache.set(rule, {\n        onChange: this.changeEntity.bind(this),\n        getDisabledState: this.getDisabledState,\n        entities: this.entities,\n        $implicit: rule\n      });\n    }\n    return this.entityContextCache.get(rule);\n  }\n\n  getSwitchGroupContext(): SwitchGroupContext {\n    return {\n      onChange: this.changeCondition.bind(this),\n      getDisabledState: this.getDisabledState,\n      $implicit: this.data\n    };\n  }\n\n  getArrowIconContext(): ArrowIconContext {\n    return {\n      getDisabledState: this.getDisabledState,\n      $implicit: this.data\n    };\n  }\n\n  getEmptyWarningContext(): EmptyWarningContext {\n    return {\n      getDisabledState: this.getDisabledState,\n      message: this.emptyMessage,\n      $implicit: this.data\n    };\n  }\n\n  getOperatorContext(rule: Rule): OperatorContext {\n    if (!this.operatorContextCache.has(rule)) {\n      this.operatorContextCache.set(rule, {\n        onChange: this.changeOperator.bind(this),\n        getDisabledState: this.getDisabledState,\n        operators: this.getOperators(rule.field),\n        $implicit: rule\n      });\n    }\n    return this.operatorContextCache.get(rule);\n  }\n\n  getInputContext(rule: Rule): InputContext {\n    if (!this.inputContextCache.has(rule)) {\n      this.inputContextCache.set(rule, {\n        onChange: this.changeInput.bind(this),\n        getDisabledState: this.getDisabledState,\n        options: this.getOptions(rule.field),\n        field: this.config.fields[rule.field],\n        $implicit: rule\n      });\n    }\n    return this.inputContextCache.get(rule);\n  }\n\n  private calculateFieldChangeValue(\n    currentField: Field,\n    nextField: Field,\n    currentValue: any\n  ): any {\n\n    if (this.config.calculateFieldChangeValue != null) {\n      return this.config.calculateFieldChangeValue(\n        currentField, nextField, currentValue);\n    }\n\n    const canKeepValue = () => {\n      if (currentField == null || nextField == null) {\n        return false;\n      }\n      return currentField.type === nextField.type\n        && this.defaultPersistValueTypes.indexOf(currentField.type) !== -1;\n    };\n\n    if (this.persistValueOnFieldChange && canKeepValue()) {\n      return currentValue;\n    }\n\n    if (nextField && nextField.defaultValue !== undefined) {\n      return this.getDefaultValue(nextField.defaultValue);\n    }\n\n    return undefined;\n  }\n\n  private checkEmptyRuleInRuleset(ruleset: RuleSet): boolean {\n    if (!ruleset || !ruleset.rules || ruleset.rules.length === 0) {\n      return true;\n    } else {\n      return ruleset.rules.some((item: RuleSet) => {\n        if (item.rules) {\n          return this.checkEmptyRuleInRuleset(item);\n        } else {\n          return false;\n        }\n      });\n    }\n  }\n\n  private validateRulesInRuleset(ruleset: RuleSet, errorStore: any[]) {\n    if (ruleset && ruleset.rules && ruleset.rules.length > 0) {\n      ruleset.rules.forEach((item) => {\n        if ((item as RuleSet).rules) {\n          return this.validateRulesInRuleset(item as RuleSet, errorStore);\n        } else if ((item as Rule).field) {\n          const field = this.config.fields[(item as Rule).field];\n          if (field && field.validator && field.validator.apply) {\n            const error = field.validator(item as Rule, ruleset);\n            if (error != null) {\n              errorStore.push(error);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private handleDataChange(): void {\n    this.changeDetectorRef.markForCheck();\n    if (this.onChangeCallback) {\n      this.onChangeCallback();\n    }\n    if (this.parentChangeCallback) {\n      this.parentChangeCallback();\n    }\n  }\n\n  private handleTouched(): void {\n    if (this.onTouchedCallback) {\n      this.onTouchedCallback();\n    }\n    if (this.parentTouchedCallback) {\n      this.parentTouchedCallback();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, } from '@angular/forms';\n\nimport { QueryBuilderComponent } from './query-builder/query-builder.component';\n\nimport { QueryArrowIconDirective } from './query-builder/query-arrow-icon.directive';\nimport { QueryFieldDirective } from './query-builder/query-field.directive';\nimport { QueryInputDirective } from './query-builder/query-input.directive';\nimport { QueryEntityDirective } from './query-builder/query-entity.directive';\nimport { QueryOperatorDirective } from './query-builder/query-operator.directive';\nimport { QueryButtonGroupDirective } from './query-builder/query-button-group.directive';\nimport { QuerySwitchGroupDirective } from './query-builder/query-switch-group.directive';\nimport { QueryRemoveButtonDirective } from './query-builder/query-remove-button.directive';\nimport { QueryEmptyWarningDirective } from './query-builder/query-empty-warning.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    QueryBuilderComponent,\n    QueryInputDirective,\n    QueryOperatorDirective,\n    QueryFieldDirective,\n    QueryEntityDirective,\n    QueryButtonGroupDirective,\n    QuerySwitchGroupDirective,\n    QueryRemoveButtonDirective,\n    QueryEmptyWarningDirective,\n    QueryArrowIconDirective\n  ],\n  exports: [\n    QueryBuilderComponent,\n    QueryInputDirective,\n    QueryOperatorDirective,\n    QueryFieldDirective,\n    QueryEntityDirective,\n    QueryButtonGroupDirective,\n    QuerySwitchGroupDirective,\n    QueryRemoveButtonDirective,\n    QueryEmptyWarningDirective,\n    QueryArrowIconDirective\n  ]\n})\nexport class QueryBuilderModule { }\n"]}